fam <- fam.raw %>%
mutate(X1 = as.numeric(gsub('DIAN_', "", X1))) %>%
mutate(X2 = as.numeric(gsub('DIAN_', "", X2))) %>%
left_join(select(info, BARCODE, `FAMILY ID`, `INDIVIDUAL ID`, Gender), by = c('X2' = 'BARCODE')) %>%
mutate(Sex = ifelse(Gender == 0, 2, Gender)) %>%
rename(FID = `FAMILY ID`, IID = `INDIVIDUAL ID`, PIID = X3, MIID = X4, Pheno = X6) %>%
select(FID, IID, PIID, MIID, Sex, Pheno)
fam
clinical <- read_csv('/Users/sheaandrews/Documents/0_Data/DIAN/CLINICAL_DF12_all.csv')
clinical
View(clinical)
colnames(clinical)
grep('ID', colnames(clinical))
grep('ID', colnames(clinical), value = T)
select(newid12, PARENTID, FAMILYID, GMOMID, GDADID, MOMID, DADID)
select(clinical, newid12, PARENTID, FAMILYID, GMOMID, GDADID, MOMID, DADID)
info
count(FIID)
count(fam, FIID)
fam
count(fam, FID)
filter(fam, FID == 0007)
filter(fam, FID == '0007')
filter(clinical, FAMILYID == 7)
clinical %>% filter(FAMILYID == 7) %>% select(newid12, PARENTID, FAMILYID, GMOMID, GDADID, MOMID, DADID)
filter(fam, FID == '0007')
t2 <- clinical %>% filter(FAMILYID == 7) %>% select(newid12, PARENTID, FAMILYID, GMOMID, GDADID, MOMID, DADID)
t1 <- filter(fam, FID == '0007')
anti_join(t1, t2, by = c('IID' = 'GMOMID'))
anti_join(t1, t2, by = c('IID' = 'GDADID'))
anti_join(t1, t2, by = c('IID' = 'MOMID'))
anti_join(t1, t2, by = c('IID' = 'DADID'))
clinical
info
semi_join(fam, clinical, by = c('IID' = 'DADID'))
semi_join(fam, clinical, by = c('IID' = 'MOMID'))
semi_join(fam, clinical, by = c('IID' = 'GDADID'))
tail(fam)
fam <- fam.raw %>%
mutate(X1 = as.numeric(gsub('DIAN_', "", X1))) %>%
mutate(X2 = as.numeric(gsub('DIAN_', "", X2))) %>%
left_join(select(info, BARCODE, `FAMILY ID`, `INDIVIDUAL ID`, Gender), by = c('X2' = 'BARCODE')) %>%
mutate(Sex = ifelse(Gender == 0, 2, Gender)) %>%
rename(FID = `FAMILY ID`, IID = `INDIVIDUAL ID`, PIID = X3, MIID = X4, Pheno = X6) %>%
mutate(FID = ifelse(is.na(FID), X1, FID)) %>%
select(FID, IID, PIID, MIID, Sex, Pheno)
tail(fam)
fam <- fam.raw %>%
mutate(X1 = as.numeric(gsub('DIAN_', "", X1))) %>%
mutate(X2 = as.numeric(gsub('DIAN_', "", X2))) %>%
left_join(select(info, BARCODE, `FAMILY ID`, `INDIVIDUAL ID`, Gender), by = c('X2' = 'BARCODE')) %>%
mutate(Sex = ifelse(Gender == 0, 2, Gender)) %>%
rename(FID = `FAMILY ID`, IID = `INDIVIDUAL ID`, PIID = X3, MIID = X4, Pheno = X6) %>%
mutate(FID = ifelse(is.na(FID), X1, FID)) %>%
mutate(IID = ifelse(is.na(IID), X2, IID)) %>%
select(FID, IID, PIID, MIID, Sex, Pheno)
fam
tail(fam)
info
semi_join(fam, clinical, by = c('IID' = 'GDADID'))
anti_join(t1, t2, by = c('IID' = 'DADID'))
semi_join(fam, clinical, by = c('IID' = 'GMOMID'))
grep('ID', colnames(clinical), value = T)
grep('*ID', colnames(clinical), value = T)
grep('*ID$', colnames(clinical), value = T)
semi_join(fam, clinical, by = c('IID' = 'SIB1ID'))
clinical
clinical <- read_csv('/Users/sheaandrews/Documents/0_Data/DIAN/CLINICAL_DF12_all.csv') %>%
filter(visit == v00)
clinical <- read_csv('/Users/sheaandrews/Documents/0_Data/DIAN/CLINICAL_DF12_all.csv') %>%
filter(visit == 'v00')
clinical
semi_join(fam, clinical, by = c('IID' = 'SIB1ID'))
semi_join(fam, clinical, by = c('IID' = 'SIB2ID'))
semi_join(fam, clinical, by = c('IID' = 'SIB3ID'))
semi_join(fam, clinical, by = c('IID' = 'SIB4ID'))
semi_join(fam, clinical, by = c('IID' = 'SIB5ID'))
semi_join(fam, clinical, by = c('IID' = 'SIB6ID'))
semi_join(fam, clinical, by = c('IID' = 'SIB7ID'))
semi_join(fam, clinical, by = c('IID' = 'DADID'))
semi_join(fam, clinical, by = c('IID' = 'MOMID'))
grep('*ID$', colnames(clinical), value = T)
semi_join(fam, clinical, by = c('IID' = 'REL1ID'))
semi_join(fam, clinical, by = c('IID' = 'REL2ID'))
semi_join(fam, clinical, by = c('IID' = 'KID1ID'))
semi_join(fam, clinical, by = c('IID' = 'KID2ID'))
semi_join(fam, clinical, by = c('IID' = 'KID1ID'))
semi_join(fam, clinical, by = c('IID' = 'DADID'))
efam.raw <- read_delim('/Users/sheaandrews/LOAD_minerva/dummy/Data/DIAN/OriginalPLINK/DIAN_genotyped.fam, col_names = F, delim = ' ')
''
'
''
'
efam.raw <- read_delim('/Users/sheaandrews/LOAD_minerva/dummy/Data/DIAN/OriginalPLINK/DIAN_genotyped.fam', col_names = F, delim = ' ')
efam.raw
fam <- fam.raw %>%
mutate(X1 = as.numeric(gsub('DIAN_', "", X1))) %>%
mutate(X2 = as.numeric(gsub('DIAN_', "", X2)))
t1 <- anti_join(fam, info, by = c('X2' = 'BARCODE'))
t1
anti_join(t1, efam.raw, by = c('X2' = 'X2'))
semi_join(t1, efam.raw, by = c('X2' = 'X2'))
fam <- fam.raw %>%
mutate(X1 = as.numeric(gsub('DIAN_', "", X1))) %>%
mutate(X2 = as.numeric(gsub('DIAN_', "", X2))) %>%
left_join(select(info, BARCODE, `FAMILY ID`, `INDIVIDUAL ID`, Gender), by = c('X2' = 'BARCODE')) %>%
mutate(Sex = ifelse(Gender == 0, 2, Gender)) %>%
rename(FID = `FAMILY ID`, IID = `INDIVIDUAL ID`, PIID = X3, MIID = X4, Pheno = X6) %>%
mutate(FID = ifelse(is.na(FID), X1, FID)) %>%
mutate(IID = ifelse(is.na(IID), X2, IID)) %>%
select(FID, IID, PIID, MIID, Sex, Pheno)
fam
tail(fam)
write_delim(fam, '/Users/sheaandrews/Documents/0_Data/DIAN/Genetics_CoreExome/201711_CoreExome-DIAN_fixed.fam')
knitr::opts_chunk$set(echo = TRUE)
knitr::opts_knit$set(root.dir = params$rwd)
## ---- Load Pacakges ---- ##
library(tidyverse)
library(ggplot2)
library(knitr)
## ---- Read in Data ----##
sexcheck.raw <- read_table(params$Path_SexFile)
##  recode sex varibles
sexcheck <- sexcheck.raw %>%
mutate(PEDSEX = recode(PEDSEX, '2' = 'Female', '1' = 'Male'))
##  Exclude samples with no sex inconsistencies
exclude.samples <- sexcheck %>%
filter(STATUS == 'PROBLEM') %>%
mutate(PEDSEX = recode(PEDSEX, '2' = 'Female', '1' = 'Male'))
exclude.samples
ggplot(data = sexcheck, aes(x = as.factor(PEDSEX), y = F, colour = STATUS, shape = STATUS)) +
geom_jitter() +
scale_color_manual(values = c( "#377EB8", "#E41A1C")) +
theme_bw() + labs(x = 'Self reported sex', y = 'X CHR Heterozygocity (F)') + theme(legend.position="bottom")
fam <- fam.raw %>%
mutate(X1 = as.numeric(gsub('DIAN_', "", X1))) %>%
mutate(X2 = as.numeric(gsub('DIAN_', "", X2))) %>%
left_join(select(info, BARCODE, `FAMILY ID`, `INDIVIDUAL ID`, Gender), by = c('X2' = 'BARCODE')) %>%
mutate(Sex = ifelse(Gender == 0, 2, Gender)) %>%
rename(FID = `FAMILY ID`, IID = `INDIVIDUAL ID`, PIID = X3, MIID = X4, Pheno = X6) %>%
mutate(FID = ifelse(is.na(FID), X1, FID)) %>%
mutate(IID = ifelse(is.na(IID), X2, IID)) %>%
select(FID, IID, PIID, MIID, Sex, Pheno)
write_delim(fam, '/Users/sheaandrews/Documents/0_Data/DIAN/Genetics_CoreExome/201711_CoreExome-DIAN.fam', col_names = F)
## ---- Read in Data ----##
sexcheck.raw <- read_table(params$Path_SexFile)
##  recode sex varibles
sexcheck <- sexcheck.raw %>%
mutate(PEDSEX = recode(PEDSEX, '2' = 'Female', '1' = 'Male'))
##  Exclude samples with no sex inconsistencies
exclude.samples <- sexcheck %>%
filter(STATUS == 'PROBLEM') %>%
mutate(PEDSEX = recode(PEDSEX, '2' = 'Female', '1' = 'Male'))
ggplot(data = sexcheck, aes(x = as.factor(PEDSEX), y = F, colour = STATUS, shape = STATUS)) +
geom_jitter() +
scale_color_manual(values = c( "#377EB8", "#E41A1C")) +
theme_bw() + labs(x = 'Self reported sex', y = 'X CHR Heterozygocity (F)') + theme(legend.position="bottom")
bim <- read_delim('/Users/sheaandrews/LOAD_minerva/dummy/Data/DIAN/OriginalPLINK/DIAN_genotyped.bim', col_names = F, delim = ' ')
bim <- read_tsv('/Users/sheaandrews/LOAD_minerva/dummy/Data/DIAN/OriginalPLINK/DIAN_genotyped.bim', col_names = F)
bim
bim <- mutate(X2 = paste(X1, X4, X5, X6, sep = ":"))
bim <- mutate(bim, X2 = paste(X1, X4, X5, X6, sep = ":"))
bim
data/1000genomes_allChr.bim
?read_tsv
bim <- read_tsv('/Users/sheaandrews/Documents/Test/temp/201711_CoreExome-DIAN_HetExclude.bim', col_names = F)
head(bim)
bi
bim
duplicate(bim)
distinct(bim)
filter(X2 == 1:1062638:A:C)
filter(bim, X2 == 1:1062638:A:C)
filter(bim, X2 == '1:1062638:A:C')
knitr::opts_chunk$set(echo = TRUE)
knitr::opts_knit$set(root.dir = params$rwd)
## ---- Load Pacakges ---- ##
library(tidyverse)
library(ggplot2)
library(knitr)
## ---- Read in Data ----##
sexcheck.raw <- read_table(params$Path_SexFile)
##  recode sex varibles
sexcheck <- sexcheck.raw %>%
mutate(PEDSEX = recode(PEDSEX, '2' = 'Female', '1' = 'Male'))
##  Exclude samples with no sex inconsistencies
exclude.samples <- sexcheck %>%
filter(STATUS == 'PROBLEM') %>%
mutate(PEDSEX = recode(PEDSEX, '2' = 'Female', '1' = 'Male'))
sexcheck.raw
knitr::opts_chunk$set(echo = TRUE)
knitr::opts_knit$set(root.dir = params$rwd)
## ---- Load Pacakges ---- ##
library(tidyverse)
library(ggplot2)
library(knitr)
## ---- Read in Data ----##
##  Read in .genome file obtained from PLINK using the --genome option
dat.inter <- as.tibble(read.table(params$Path_GenomeFile, header = TRUE, check.names = FALSE, as.is = TRUE))
#dat.inter <- read_table(params$Path_GenomeFile, col_names = TRUE)
##  Read in PLINK .fam file
fam <- read_delim(params$Path_FamFile, delim = " ", col_names = F)
ggplot(dat.inter, aes(x = PI_HAT)) +
geom_histogram(binwidth = 0.01, fill = "#377EB8") + lims(x = 0:1) +
theme_bw() + labs(x = 'Kinship Coefficent (pi-hat)') +
geom_vline(xintercept = 0.1, colour = 'red', linetype = 2)
ggplot(dat.inter, aes(x = Z0, y = Z1, colour = PI_HAT > 0.1)) +
#geom_label_repel(data = filter(dat.inter, PI_HAT > 0.1), aes(x = Z0, y = Z1, label = paste(IID1, '-', IID2))) +
geom_point() + lims(x = 0:1, y = 0:1) +
scale_colour_manual(name = c('PI HAT > 0.1'), values = c("#E41A1C", "#377EB8")) +
labs(x = 'IBD Z0', y = 'IBD Z1') +
coord_fixed() + theme_bw() + theme(legend.position="bottom")
Infile = '/Users/sheaandrews/Documents/Test/temp/NewTest.dupvar'
dupvar <- read_tsv(Infile, col_names = F)
dupvar
dupvar <- read_tsv(Infile, col_names = T)
dupvar
dupvar %>% separate(IDS, testa, testb, sep = " ")
dupvar %>% separate(IDS, sep = " ")
dupvar %>% separate(IDS, c('testa', 'testb'), sep = " ")
dupvar %>% separate(IDS, c('testa', 'testb', 'testc'), sep = " ")
dupvar %>% separate(IDS, c('Var1', 'Var2', 'Var3'), sep = " ")
Infile
dupvar %>% separate(IDS, c('Var1', 'Var2', 'Var3'), sep = " ") %>% select(Var1) write_tsv("/Users/sheaandrews/Documents/Test/temp/NewTest.dupvar.delete")
dupvar %>% separate(IDS, c('Var1', 'Var2', 'Var3'), sep = " ") %>% select(Var1) %>% write_tsv("/Users/sheaandrews/Documents/Test/temp/NewTest.dupvar.delete")
bim <- read_tsv('/Users/sheaandrews/Documents/Test/temp/NewTest2.bim', col_names = F)
bim
distinct(bim, X2)
Infile
paste0(Infile, 'delete')
paste0(Infile, '.delete')
knitr::opts_chunk$set(echo = TRUE)
knitr::opts_knit$set(root.dir = params$rwd)
## ---- Load Required R packages ---- ##
library(ggplot2)    ## For ploting
library(ggforce)    ## for zoom plots
library(GGally)     ## For Pairs plot
library(tidyverse)  ## for data wrangling
library(plotly)     ## For 3d interactive scatter plots
library(gridExtra)
##  Standarize varibles to have a mean of 0 and sd of 1
zscore = function(x){(x - mean(x)) / sd(x)}
##---- Read in Data ----##
# PCA file from plink
pca.raw <- as.tibble(read_delim(params$Path_eigenvec, delim = " ", col_names = F))
# population data file from 1000 genomes
base_pops.raw <- read_tsv(params$PATH_BasePops)
# population data from target set
target_pops.raw <- read_delim(params$Path_TargetPops, delim = " ", col_names = F)
# egien values
eigenval.raw <- read_table(params$Path_eigenval, col_names = F)
knitr::opts_chunk$set(echo = TRUE)
knitr::opts_knit$set(root.dir = params$rwd)
## ---- Load Required R packages ---- ##
library(ggplot2)    ## For ploting
library(ggforce)    ## for zoom plots
library(GGally)     ## For Pairs plot
library(tidyverse)  ## for data wrangling
library(plotly)     ## For 3d interactive scatter plots
library(gridExtra)
##  Standarize varibles to have a mean of 0 and sd of 1
zscore = function(x){(x - mean(x)) / sd(x)}
##---- Read in Data ----##
# PCA file from plink
pca.raw <- as.tibble(read_delim(params$Path_eigenvec, delim = " ", col_names = F))
# population data file from 1000 genomes
base_pops.raw <- read_tsv(params$PATH_BasePops)
# population data from target set
target_pops.raw <- read_delim(params$Path_TargetPops, delim = " ", col_names = F)
# egien values
eigenval.raw <- read_table(params$Path_eigenval, col_names = F)
##---- Data wrangling ----##
##  rename column names in PCA file
colnames(pca.raw) <- c('FID', 'IID', paste0('PC', seq(1, ncol(pca.raw)-2, 1)))
##  standardize PC to a z-score
pca <- mutate_at(pca.raw, c('PC1', 'PC2', 'PC3', 'PC4', 'PC5', 'PC6', 'PC7', 'PC8', 'PC9', 'PC10'), zscore)
##  Proportion of variance explained by each PC in PCA
eigenval <- eigenval.raw %>%
mutate(PC = paste0('PC', 1:10)) %>%
rename(eigenval = X1) %>%
mutate(PC = factor(PC, levels = paste0('PC', 1:10))) %>%
mutate(PVE = round(eigenval / sum(eigenval), 3))
##  Munge population dataframes from 1000 genomes
base_pops <- base_pops.raw %>%
dplyr:::rename(IID = `Individual ID`) %>%
select(IID, Population) %>%
mutate(SuperPopulation = recode(base_pops.raw$Population, GBR = 'EUR', FIN = 'EUR', CHS = 'EAS', PUR = 'AMR', CDX = 'EAS', CLM = 'AMR', IBS = 'EUR', PEL = 'AMR', PJL = 'SAS', KHV = 'EAS', ACB = 'AFR', GWD = 'AFR', ESN = 'AFR', BEB = 'SAS', MSL = 'AFR', STU = 'SAS', ITU = 'SAS', CEU = 'EUR', YRI = 'AFR', CHB = 'EAS', JPT = 'EAS', LWK = 'AFR', ASW = 'AFR', MXL = 'AMR', TSI = 'EUR', GIH = 'SAS')) %>%
mutate(cohort = '1kgenomes')
##  Munge target population dataframes
target_pops <- target_pops.raw %>%
select(X2) %>%
rename(IID = X2) %>%
mutate(Population = params$Sample, SuperPopulation = params$Sample, cohort = params$Sample, Population_2 = params$Sample)
##  Munge PCA, base pop and target pop
pca <- target_pops %>%
bind_rows(base_pops) %>%
right_join(pca, by = 'IID')
##  Relevel Population Factor for ploting
pca$Population_2 <- factor(pca$Population, level = c(params$Sample, 'GBR', 'FIN', 'IBS', 'CEU', 'TSI', 'PUR', 'CLM', 'PEL', 'MXL', 'CHS', 'CDX', 'KHV', 'CHB', 'JPT', 'PJL', 'BEB', 'STU', 'ITU', 'GIH', 'GWD', 'ESN', 'MSL', 'YRI', 'LWK', 'ASW', 'ACB'))
target_pops
##---- Data wrangling ----##
##  rename column names in PCA file
colnames(pca.raw) <- c('FID', 'IID', paste0('PC', seq(1, ncol(pca.raw)-2, 1)))
##  standardize PC to a z-score
pca <- mutate_at(pca.raw, c('PC1', 'PC2', 'PC3', 'PC4', 'PC5', 'PC6', 'PC7', 'PC8', 'PC9', 'PC10'), zscore)
##  Proportion of variance explained by each PC in PCA
eigenval <- eigenval.raw %>%
mutate(PC = paste0('PC', 1:10)) %>%
rename(eigenval = X1) %>%
mutate(PC = factor(PC, levels = paste0('PC', 1:10))) %>%
mutate(PVE = round(eigenval / sum(eigenval), 3))
##  Munge population dataframes from 1000 genomes
base_pops <- base_pops.raw %>%
dplyr:::rename(IID = `Individual ID`) %>%
select(IID, Population) %>%
mutate(SuperPopulation = recode(base_pops.raw$Population, GBR = 'EUR', FIN = 'EUR', CHS = 'EAS', PUR = 'AMR', CDX = 'EAS', CLM = 'AMR', IBS = 'EUR', PEL = 'AMR', PJL = 'SAS', KHV = 'EAS', ACB = 'AFR', GWD = 'AFR', ESN = 'AFR', BEB = 'SAS', MSL = 'AFR', STU = 'SAS', ITU = 'SAS', CEU = 'EUR', YRI = 'AFR', CHB = 'EAS', JPT = 'EAS', LWK = 'AFR', ASW = 'AFR', MXL = 'AMR', TSI = 'EUR', GIH = 'SAS')) %>%
mutate(cohort = '1kgenomes')
##  Munge target population dataframes
target_pops <- target_pops.raw %>%
select(X2) %>%
rename(IID = X2) %>%
mutate(Population = params$Sample, SuperPopulation = params$Sample, cohort = params$Sample, Population_2 = params$Sample)
##  Munge PCA, base pop and target pop
pca <- target_pops %>%
mutate(IID = as.character(IID)) %>%
bind_rows(base_pops) %>%
right_join(pca, by = 'IID')
##  Relevel Population Factor for ploting
pca$Population_2 <- factor(pca$Population, level = c(params$Sample, 'GBR', 'FIN', 'IBS', 'CEU', 'TSI', 'PUR', 'CLM', 'PEL', 'MXL', 'CHS', 'CDX', 'KHV', 'CHB', 'JPT', 'PJL', 'BEB', 'STU', 'ITU', 'GIH', 'GWD', 'ESN', 'MSL', 'YRI', 'LWK', 'ASW', 'ACB'))
#Include the number of PC for where the cumualtive PVE is 95%
PC.inc <-  findInterval(0.95, cumsum(eigenval$PVE)) + 1
## ---- Plot scree plot of proportion of varaince explained by Principal components ---- ##
p1 <- ggplot(data = eigenval, aes(x = PC, y = PVE, group = factor(1))) +
geom_point(colour = '#377EB8') + geom_path(colour = '#377EB8') +
labs(x = 'Principal Components') +
theme_bw() + ylim(0,1)
p2 <- ggplot(data = eigenval, aes(x=PC, y=cumsum(PVE), group = factor(1))) +
geom_point(colour = '#377EB8') + geom_path(colour = '#377EB8') +
labs(x = 'Principal Components', y = 'cumulative PVE') +
theme_bw() + ylim(0,1) + geom_hline(yintercept = 0.95, colour = '#E41A1C', linetype = 2)
grid.arrange(p1, p2, ncol = 2)
##---- Plot pairs plots ----##
GGally::ggpairs(pca, columns = paste0('PC', 1:PC.inc), aes(colour = SuperPopulation, shape = cohort)) +  theme_bw()
##  Plot Superpopulations, PC1 + PC2
ggplot(pca, aes(x = PC2, y = PC1, colour = SuperPopulation, shape = cohort)) +
geom_point() + facet_zoom(xy = SuperPopulation == 'EUR') + scale_color_manual(values = c('black', "#E41A1C", "#377EB8", "#4DAF4A", "#984EA3", "#FF7F00")) +
coord_fixed(ratio = 1) + theme_bw() + theme(legend.position = 'right')
##  Plot Superpopulations, PC1 + PC2 + PC3
plot_ly(pca, x = ~PC2, y = ~PC1, z = ~PC3, color = ~SuperPopulation, type = 'scatter3d', mode = 'markers',
marker = list(size = 3),
colors = c('black', "#E41A1C", "#377EB8", "#4DAF4A", "#984EA3", "#FF7F00"),
hoverinfo = 'text', text = ~paste('</br> ID: ', IID,
'</br> Population: ', Population,
'</br> PC1: ', round(PC1, 2),
'</br> PC2: ', round(PC2, 2),
'</br> PC3: ', round(PC3, 2)))
eigenval
base_pops
target_pops
pca
pca.raw
##  Standarize varibles to have a mean of 0 and sd of 1
zscore = function(x){(x - mean(x)) / sd(x)}
##  standardize PC to a z-score
pca <- mutate_at(pca.raw, c('PC1', 'PC2', 'PC3', 'PC4', 'PC5', 'PC6', 'PC7', 'PC8', 'PC9', 'PC10'), zscore)
pca
##---- Data wrangling ----##
##  rename column names in PCA file
colnames(pca.raw) <- c('FID', 'IID', paste0('PC', seq(1, ncol(pca.raw)-2, 1)))
pca.raw
mutate_at(pca.raw, c('PC1', 'PC2', 'PC3', 'PC4', 'PC5', 'PC6', 'PC7', 'PC8', 'PC9', 'PC10'), zscore)
zscore
zscore(pca.raw$PC1)
mean(pca.raw$PC1)
sd(pca.raw$PC1)
summary(pca.raw)
knitr::opts_chunk$set(echo = TRUE)
knitr::opts_knit$set(root.dir = params$rwd)
## ---- Load Required R packages ---- ##
library(ggplot2)    ## For ploting
library(ggforce)    ## for zoom plots
library(GGally)     ## For Pairs plot
library(tidyverse)  ## for data wrangling
library(plotly)     ## For 3d interactive scatter plots
library(gridExtra)
##  Standarize varibles to have a mean of 0 and sd of 1
zscore = function(x){(x - mean(x, na.rm = T)) / sd(x, na.rm = T)}
##---- Data wrangling ----##
##  rename column names in PCA file
colnames(pca.raw) <- c('FID', 'IID', paste0('PC', seq(1, ncol(pca.raw)-2, 1)))
##  standardize PC to a z-score
pca <- mutate_at(pca.raw, c('PC1', 'PC2', 'PC3', 'PC4', 'PC5', 'PC6', 'PC7', 'PC8', 'PC9', 'PC10'), zscore)
##  Proportion of variance explained by each PC in PCA
eigenval <- eigenval.raw %>%
mutate(PC = paste0('PC', 1:10)) %>%
rename(eigenval = X1) %>%
mutate(PC = factor(PC, levels = paste0('PC', 1:10))) %>%
mutate(PVE = round(eigenval / sum(eigenval), 3))
##  Munge population dataframes from 1000 genomes
base_pops <- base_pops.raw %>%
dplyr:::rename(IID = `Individual ID`) %>%
select(IID, Population) %>%
mutate(SuperPopulation = recode(base_pops.raw$Population, GBR = 'EUR', FIN = 'EUR', CHS = 'EAS', PUR = 'AMR', CDX = 'EAS', CLM = 'AMR', IBS = 'EUR', PEL = 'AMR', PJL = 'SAS', KHV = 'EAS', ACB = 'AFR', GWD = 'AFR', ESN = 'AFR', BEB = 'SAS', MSL = 'AFR', STU = 'SAS', ITU = 'SAS', CEU = 'EUR', YRI = 'AFR', CHB = 'EAS', JPT = 'EAS', LWK = 'AFR', ASW = 'AFR', MXL = 'AMR', TSI = 'EUR', GIH = 'SAS')) %>%
mutate(cohort = '1kgenomes')
##  Munge target population dataframes
target_pops <- target_pops.raw %>%
select(X2) %>%
rename(IID = X2) %>%
mutate(Population = params$Sample, SuperPopulation = params$Sample, cohort = params$Sample, Population_2 = params$Sample)
##  Munge PCA, base pop and target pop
pca <- target_pops %>%
mutate(IID = as.character(IID)) %>%
bind_rows(base_pops) %>%
right_join(pca, by = 'IID')
##  Relevel Population Factor for ploting
pca$Population_2 <- factor(pca$Population, level = c(params$Sample, 'GBR', 'FIN', 'IBS', 'CEU', 'TSI', 'PUR', 'CLM', 'PEL', 'MXL', 'CHS', 'CDX', 'KHV', 'CHB', 'JPT', 'PJL', 'BEB', 'STU', 'ITU', 'GIH', 'GWD', 'ESN', 'MSL', 'YRI', 'LWK', 'ASW', 'ACB'))
summary(pca)
##---- Plot pairs plots ----##
GGally::ggpairs(pca, columns = paste0('PC', 1:PC.inc), aes(colour = SuperPopulation, shape = cohort)) +  theme_bw()
##  Plot Superpopulations, PC1 + PC2
ggplot(pca, aes(x = PC2, y = PC1, colour = SuperPopulation, shape = cohort)) +
geom_point() + facet_zoom(xy = SuperPopulation == 'EUR') + scale_color_manual(values = c('black', "#E41A1C", "#377EB8", "#4DAF4A", "#984EA3", "#FF7F00")) +
coord_fixed(ratio = 1) + theme_bw() + theme(legend.position = 'right')
##  Plot Superpopulations, PC1 + PC2 + PC3
plot_ly(pca, x = ~PC2, y = ~PC1, z = ~PC3, color = ~SuperPopulation, type = 'scatter3d', mode = 'markers',
marker = list(size = 3),
colors = c('black', "#E41A1C", "#377EB8", "#4DAF4A", "#984EA3", "#FF7F00"),
hoverinfo = 'text', text = ~paste('</br> ID: ', IID,
'</br> Population: ', Population,
'</br> PC1: ', round(PC1, 2),
'</br> PC2: ', round(PC2, 2),
'</br> PC3: ', round(PC3, 2)))
vcf <- read_tsv('/Users/sheaandrews/Documents/Test/temp/201711_CoreExome-DIAN_1kg_merged.vcf')
vcf <- read_tsv('/Users/sheaandrews/Documents/Test/temp/201711_CoreExome-DIAN_1kg_merged.vcf', comment = '##')
vcf
##---- Read in Data ----##
# PCA file from plink
pca.raw <- as.tibble(read_delim(params$Path_eigenvec, delim = " ", col_names = F))
# population data file from 1000 genomes
base_pops.raw <- read_tsv(params$PATH_BasePops)
# population data from target set
target_pops.raw <- read_delim(params$Path_TargetPops, delim = " ", col_names = F)
# egien values
eigenval.raw <- read_table(params$Path_eigenval, col_names = F)
##---- Data wrangling ----##
##  rename column names in PCA file
colnames(pca.raw) <- c('FID', 'IID', paste0('PC', seq(1, ncol(pca.raw)-2, 1)))
##  standardize PC to a z-score
pca <- mutate_at(pca.raw, c('PC1', 'PC2', 'PC3', 'PC4', 'PC5', 'PC6', 'PC7', 'PC8', 'PC9', 'PC10'), zscore)
##  Proportion of variance explained by each PC in PCA
eigenval <- eigenval.raw %>%
mutate(PC = paste0('PC', 1:10)) %>%
rename(eigenval = X1) %>%
mutate(PC = factor(PC, levels = paste0('PC', 1:10))) %>%
mutate(PVE = round(eigenval / sum(eigenval), 3))
##  Munge population dataframes from 1000 genomes
base_pops <- base_pops.raw %>%
dplyr:::rename(IID = `Individual ID`) %>%
select(IID, Population) %>%
mutate(SuperPopulation = recode(base_pops.raw$Population, GBR = 'EUR', FIN = 'EUR', CHS = 'EAS', PUR = 'AMR', CDX = 'EAS', CLM = 'AMR', IBS = 'EUR', PEL = 'AMR', PJL = 'SAS', KHV = 'EAS', ACB = 'AFR', GWD = 'AFR', ESN = 'AFR', BEB = 'SAS', MSL = 'AFR', STU = 'SAS', ITU = 'SAS', CEU = 'EUR', YRI = 'AFR', CHB = 'EAS', JPT = 'EAS', LWK = 'AFR', ASW = 'AFR', MXL = 'AMR', TSI = 'EUR', GIH = 'SAS')) %>%
mutate(cohort = '1kgenomes')
##  Munge target population dataframes
target_pops <- target_pops.raw %>%
select(X2) %>%
rename(IID = X2) %>%
mutate(Population = params$Sample, SuperPopulation = params$Sample, cohort = params$Sample, Population_2 = params$Sample)
##  Munge PCA, base pop and target pop
pca <- target_pops %>%
mutate(IID = as.character(IID)) %>%
bind_rows(base_pops) %>%
right_join(pca, by = 'IID')
##  Relevel Population Factor for ploting
pca$Population_2 <- factor(pca$Population, level = c(params$Sample, 'GBR', 'FIN', 'IBS', 'CEU', 'TSI', 'PUR', 'CLM', 'PEL', 'MXL', 'CHS', 'CDX', 'KHV', 'CHB', 'JPT', 'PJL', 'BEB', 'STU', 'ITU', 'GIH', 'GWD', 'ESN', 'MSL', 'YRI', 'LWK', 'ASW', 'ACB'))
#Include the number of PC for where the cumualtive PVE is 95%
PC.inc <-  findInterval(0.95, cumsum(eigenval$PVE)) + 1
## ---- Plot scree plot of proportion of varaince explained by Principal components ---- ##
p1 <- ggplot(data = eigenval, aes(x = PC, y = PVE, group = factor(1))) +
geom_point(colour = '#377EB8') + geom_path(colour = '#377EB8') +
labs(x = 'Principal Components') +
theme_bw() + ylim(0,1)
p2 <- ggplot(data = eigenval, aes(x=PC, y=cumsum(PVE), group = factor(1))) +
geom_point(colour = '#377EB8') + geom_path(colour = '#377EB8') +
labs(x = 'Principal Components', y = 'cumulative PVE') +
theme_bw() + ylim(0,1) + geom_hline(yintercept = 0.95, colour = '#E41A1C', linetype = 2)
grid.arrange(p1, p2, ncol = 2)
##---- Plot pairs plots ----##
GGally::ggpairs(pca, columns = paste0('PC', 1:PC.inc), aes(colour = SuperPopulation, shape = cohort)) +  theme_bw()
##  Plot Superpopulations, PC1 + PC2
ggplot(pca, aes(x = PC2, y = PC1, colour = SuperPopulation, shape = cohort)) +
geom_point() + facet_zoom(xy = SuperPopulation == 'EUR') + scale_color_manual(values = c('black', "#E41A1C", "#377EB8", "#4DAF4A", "#984EA3", "#FF7F00")) +
coord_fixed(ratio = 1) + theme_bw() + theme(legend.position = 'right')
##  Plot Superpopulations, PC1 + PC2 + PC3
plot_ly(pca, x = ~PC2, y = ~PC1, z = ~PC3, color = ~SuperPopulation, type = 'scatter3d', mode = 'markers',
marker = list(size = 3),
colors = c('black', "#E41A1C", "#377EB8", "#4DAF4A", "#984EA3", "#FF7F00"),
hoverinfo = 'text', text = ~paste('</br> ID: ', IID,
'</br> Population: ', Population,
'</br> PC1: ', round(PC1, 2),
'</br> PC2: ', round(PC2, 2),
'</br> PC3: ', round(PC3, 2)))
summary(pca)
vcf <- read_tsv('/Users/sheaandrews/Documents/Test/temp/201711_CoreExome-DIAN_1kg_merged.vcf', comment = '##')
vcf
filter(vcf, HG00096_HG00096 == './.')
vcf %>% filter(HG00096_HG00096 == './.') %>% select(ID)
filter(ID == '1:1226512:A:G')
filter(vcf, ID == '1:1226512:A:G')
filter(vcf, ID == '1:1425753:C:T')
filter(vcf, POS == '1425753')
exp(-0.1602163)
warnings()
7.805475e-02
