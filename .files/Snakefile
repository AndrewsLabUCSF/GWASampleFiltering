'''Snakefile for MIS post-imputation QC
   Version 0.0.1'''

configfile: "config.yaml"
shell.executable("/bin/bash")
shell.prefix("PATH=" + config["anaconda"] + ":$PATH; ")

BPLINK = ["bed", "bim", "fam"]

from scripts.parse_config import parser

CHROM, SAMPLE, INPATH = parser(config)

localrules: all, var_qc, subj_qc, split_to_vcf

rule all:
    input:
        expand("output/{sample}_imputation_stats.html", sample=SAMPLE)

#Pre-split QC

rule var_qc_initial:
    input:
        expand(INPATH + "{{sample}}.{ext}", ext=BPLINK)
    output:
        expand("data/unpruned/{{sample}}_varqc.{ext}", ext=BPLINK)
    params:
        ins = INPATH + "{sample}",
        out = "data/unpruned/{sample}_varqc",
        geno = config["qc"]["geno"],
        maf = config["qc"]["maf"]
    threads: 1
    shell: "module load plink/1.90; "
        "plink -bfile {params.ins} --geno {params.geno} --memory 128 "
        "--keep-allele-order --maf {params.maf} "
        "--make-bed --out {params.out} --silent"

rule subj_qc:
    input:
        plink = rules.var_qc.output
    params:
        ins = rules.var_qc.params.out,
        out = "data/unpruned/{sample}_indivqc",
        mind = config["qc"]["mind"],
        keep = keep_command
    output:
        expand("data/unpruned/{{sample}}_indivqc.{ext}", ext=BPLINK)
    threads: 1
    shell: "module load plink/1.90; "
        "plink -bfile {params.ins} --memory 128 --keep-allele-order "
        "--mind {params.mind} --remove samp.irem {params.keep}"
        "--make-bed --out {params.out} --silent"

if config['qc']['sexcheck']:
    rule sexcheck:
        input:
            filtered = rules.subj_qc.output
            original = expand(INPATH + '{{sample}}' +
                              config['qc']['sex_original'] +
                              '.{ext}', ext=BPLINK)
        params:
            ins = rules.var_qc.params.out,
            out = "data/unpruned/{sample}_sexchecked",
            exclude = "data/unpruned/exclude_sex_{sample}.txt",
            sexcheck = "data/unpruned/{sample}.sexcheck"
        output:
            expand("data/unpruned/{{sample}}_sexchecked.{ext}", ext=BPLINK)
        threads: 1
        shell: "module load plink/1.90; "
            "plink -bfile {params.ins} --memory 128 --keep-allele-order "
            "--check-sex --out {params.sexcheck} --silent; "
            ""
            "Rscript scripts/sexcheck_QC.R {params.sexcheck} {params.exclude}; "
            ""
            "plink -bfile {params.ins} --memory 128 --keep-allele-order "
            "--remove {params.exclude} --make-bed --out {params.out} --silent"
else: ##TODO: this might not work because input and output are the same. Check.
    rule sexcheck:
        input: rules.subj_qc.output
        output: rules.subj_qc.output
        log: "no_sexcheck.log"
        shell:
            "echo No sexcheck performed because it was deselected > {log}"
            "echo the configuration file. Ensure no sample swapping >> {log}"
            "echo occured and self-reported sexes are correct. >> {log}"

rule prune:
    input: rules.subj_qc.output
    output:
        "data/pruned/{sample}_pruned.prune.in"
    params:
        ins = rules.var_qc.params.out,
        ibd_file = "data/pruned/{sample}_prune"
    threads: 1
    shell: "module load plink/1.90; "
        "plink -bfile {params.ins} --memory 128 --keep-allele-order "
        "--autosome --indep 50 5 1.5 --out {params.ibd_file}"

rule IBD:
    input:
        plink = rules.subj_qc.output,
        ibd = rules.prune.output,
        fam = rules.var_qc_initial.params.out + '.fam'
    output:
        genome = "data/pruned/{sample}_IBD.genome",
        plink = expand("data/pruned/{{sample}}_unrelated.{ext}", ext=BPLINK)
    params:
        ins = rules.var_qc.params.out,
        ibd_file = "data/pruned/{sample}_IBD",
        exclude = "data/pruned/{sample}_IBD_excl.txt"
        pi_hat = 0.05,
        plink = "data/pruned/{sample}_unrelated"
    threads: 1
    shell: "module load plink/1.90; "
        "plink -bfile {params.ins} --memory 128 --keep-allele-order "
        "--extract {input.ibd} --genome --min {pi_hat} --out {params.ibd_file}; "
        ""
        "Rscript scripts/relatedness_QC.R {output.genome} {input.fam} {params.exclude}; "
        ""
        "plink -bfile {params.ins} --memory 128 --keep-allele-order "
        "--remove {params.exclude} --make-bed --out {params.plink}"

rule heterozygosity:
    input:
        plink = rules.subj_qc.output,
        ibd = rules.prune.output,
        fam = rules.var_qc_initial.params.out + '.fam'
    output:
        het = "data/pruned/{sample}_het.het",
        plink = expand(
            "data/pruned/{{sample}}_unrelated_hetfilt.{ext}", ext=BPLINK)
    params:
        ins = rules.var_qc.params.out,
        het_file = "data/pruned/{sample}_het",
        exclude = "data/pruned/{sample}_het_excl.txt"
        plink = "data/pruned/{sample}_unrelated_hetfilt"
    threads: 1
    shell: "module load plink/1.90; "
        "plink -bfile {params.ins} --memory 128 --keep-allele-order "
        "--extract {input.ibd} --het --out {params.het_file}; "
        ""
        "Rscript scripts/heterozygosity_QC.R {output.het} {input.fam}
        "{params.exclude}; "
        ""
        "plink -bfile {params.ins} --memory 128 --keep-allele-order "
        "--remove {params.exclude} --make-bed --out {params.plink}"

'''
rule flippyr:
    input:
        fasta = config["ref"],
        plink = rules.subj_qc.output
    params:
        out = "data/plink/{sample}",
        suff = "_refmatched"
    output:
        expand("data/plink/{{sample}}.{ext}", ext=["allele","flip","delete","log","log.tab"]),
        command = "data/plink/{sample}.runPlink",
        plink = expand("data/plink/{{sample}}_refmatched.{ext}", ext=BPLINK)
    run:
        import flippyr
        flippyr.writeFiles(input["fasta"],input["plink"][1],params["out"],
                           silent=False,plink=False,p_suff=params["suff"])
        shell("module load plink/1.90; bash {}".format(output["command"]))

# Split, sort and compress

rule split_to_vcf: #Split plink files into chromosomes.
    input:
        rules.flippyr.output.plink
    params:
        ins = "data/plink/{sample}_refmatched",
        out = "data/{sample}_chr{chrom}_unsorted",
        c = "{chrom}"
    output:
        "data/{sample}_chr{chrom}_unsorted.vcf"
    shell: "module load plink/1.90; "
        "plink -bfile {params.ins} --chr {params.c} "
        "--memory 256 --real-ref-alleles "
        "--recode vcf --out {params.out}"

rule compress_vcf:
    input:
        rules.split_to_vcf.output
    output:
        "final/{sample}_chr{chrom}.vcf.gz"
    threads: 8
    shell: "module load tabix/0.2.6 bcftools/1.7; "
        "bcftools sort {input} -Oz -o {output}; tabix -p vcf {output}"

if config['check_vcf']:
    rule check_vcf:
        input:
            fasta=config["ref"],
            vcf="final/{sample}_chr{chrom}.vcf.gz"
        output:
            "log/{sample}_chr{chrom}.check.log"
        params:
            py_env=config["checkEnv"]
        log: "log/{sample}_chr{chrom}"
        shell:
            "source activate {params.py_env}; "
            "python scripts/checkVCF.py -r {input.fasta} -o {log} {input.vcf}"
'''
