'''Snakefile for GWAS Variant and Sample QC Version 0.3.1'''
# import ipdb; ipdb.set_trace()
from scripts.parse_config_GWASampleFiltering import parser
import os

configfile: "config/config.yaml"
do_sexqc = config['do_sexqc']

shell.executable("/bin/bash")

BPLINK = ["bed", "bim", "fam"]
RWD = os.getcwd()

start, SAMPLE, DATAOUT = parser(config)

FAMILY = 'T' if config['family'] else 'F'
istg = config['isTG'] if 'isTG' in config else False

# QC Steps:
QC_snp = True
QC_callRate = True


def flatten(nested):
    flat = []
    for el in nested:
        if not isinstance(el, list):
            flat.append(el)
        else:
            flat += flatten(el)
    return flat


outs = {
    "report": expand("{dataout}/stats/{sample}_GWAS_QC.html", sample=SAMPLE, dataout = DATAOUT),
    "exclusions": expand("{dataout}/{sample}_exclude.samples", sample=SAMPLE, dataout = DATAOUT),
    "filtered": expand("{dataout}/{sample}_Excluded.{ext}",
                       sample=SAMPLE, ext=BPLINK, dataout = DATAOUT)}

outputs = [outs[x] for x in config["outputs"]]
outputs = flatten(outputs)

rule all:
    input:
        outputs

# ---- Exlude SNPs with a high missing rate and low MAF----
rule snp_qc:
    input: start['files']
    output:
        temp(expand("{{dataout}}/{{sample}}_SnpQc.{ext}", ext=BPLINK)),
        "{dataout}/{sample}_SnpQc.hwe",
        "{dataout}/{sample}_SnpQc.frq",
        "{dataout}/{sample}_SnpQc.frqx",
    params:
        stem = start['stem'],
        out = "{dataout}/{sample}_SnpQc",
        miss = config['QC']['GenoMiss'],
        MAF = config['QC']['MAF'],
        HWE = config['QC']['HWE']
    conda: "envs/plink.yaml"
    shell:
        '''
plink --keep-allele-order --bfile {params.stem} --freq --out {params.out}
plink --keep-allele-order --bfile {params.stem} --freqx --out {params.out}
plink --keep-allele-order --bfile {params.stem} --geno {params.miss} \
--maf {params.MAF} --hardy --hwe {params.HWE} --make-bed --out {params.out}
'''

# ---- Exclude Samples with high missing rate ----
rule sample_callRate:
    input: expand("{{dataout}}/{{sample}}_SnpQc.{ext}", ext=BPLINK) if QC_snp else start['files']
    output:
        expand("{{dataout}}/{{sample}}_callRate.{ext}", ext=BPLINK, dataout = DATAOUT),
        "{dataout}/{sample}_callRate.imiss",
        touch("{dataout}/{sample}_callRate.irem")
    params:
        indat = rules.snp_qc.params.out if QC_snp else start['stem'],
        miss = config['QC']['SampMiss'],
        out = "{dataout}/{sample}_callRate"
    conda: "envs/plink.yaml"
    shell:
        '''
plink --keep-allele-order --bfile {params.indat} --mind {params.miss} \
  --missing --make-bed --out {params.out}
'''

# ---- Exclude Samples with discordant sex ----
#  Use ADNI hg18 data, as the liftover removed the x chromsome data


rule sexcheck_QC:
    input: start['sex']
    output:
        "{dataout}/{sample}_SexQC.sexcheck"
    params:
        indat = start['sex_stem'],
        out = "{dataout}/{sample}_SexQC",
    conda: "envs/plink.yaml"
    shell:
        '''
plink --keep-allele-order --bfile {params.indat} \
  --check-sex --aec --out {params.out}
'''

rule sex_sample_fail:
    input: rules.sexcheck_QC.output
    output: "{dataout}/{sample}_exclude.sexcheck"
    conda: 'envs/r.yaml'
    script: 'scripts/sexcheck_QC.R'

if QC_callRate:
    sexcheck_in_plink = rules.sample_callRate.output[0]
    sexcheck_in_plink_stem = rules.sample_callRate.params.out
elif QC_snp:
    sexcheck_in_plink = expand("{{dataout}}/{{sample}}_SnpQc.{ext}", ext=BPLINK)
    sexcheck_in_plink_stem = rules.snp_qc.params.out
else:
    sexcheck_in_plink = start['files']
    sexcheck_in_plink_stem = start['stem']

# ---- Exclude Samples with interealtedness ----
rule relatedness_sample_prep:
    input: sexcheck_in_plink
    output:
        bed = temp("{dataout}/{sample}_IBDQCfilt.bed"),
        bim = temp("{dataout}/{sample}_IBDQCfilt.bim"),
        fam = temp("{dataout}/{sample}_IBDQCfilt.fam")
    params:
        indat_plink = sexcheck_in_plink_stem,
        out = "{dataout}/{sample}_IBDQCfilt"
    conda: "envs/plink.yaml"
    shell:
        '''
plink --bfile {params.indat_plink} \
  --geno 0.02 \
  --maf 0.02 \
  --memory 6000 \
  --make-bed --out {params.out}
'''

if config['king']:
    rule relatedness_QC:
        input:
            bed = rules.relatedness_sample_prep.output.bed,
            bim = rules.relatedness_sample_prep.output.bim,
            fam = rules.relatedness_sample_prep.output.fam
        output:
            genome = "{dataout}/{sample}_IBDQC.kingfiles"
        params:
            out = "{dataout}/{sample}_IBDQC",
            dataout = DATAOUT
        conda: "envs/king.yaml"
        shell:
            '''
king -b {input.bed} --related --degree 3 --prefix {params.out}
if test -n "$(find {params.dataout} -name "{wildcards.sample}_IBDQC.kin*")"; then
  find {params.dataout} -name "{wildcards.sample}_IBDQC.kin*" > {output.genome}
fi
'''

    rule king_all:
        input:
            bed = rules.relatedness_sample_prep.output.bed,
            bim = rules.relatedness_sample_prep.output.bim,
            fam = rules.relatedness_sample_prep.output.fam
        output:
            genome = "{dataout}/{sample}_IBDQC.all.kingfiles",
        params:
            out = "{dataout}/{sample}_IBDQC.all",
            dataout = DATAOUT
        conda: "envs/king.yaml"
        shell:
            '''
king -b {input.bed} --kinship --ibs --prefix {params.out}
if test -n "$(find {params.dataout} -name "{wildcards.sample}_IBDQC.all.kin*")"; then
  find {params.dataout} -name "{wildcards.sample}_IBDQC.all.kin*" > {output.genome}
fi
'''
else:
    rule relatedness_QC:
        input: rules.sample_prune.output
        output:
            genome = "{dataout}/{sample}_IBDQC.genome"
        params:
            indat_plink = "{dataout}/{sample}_pruned",
            out = "{dataout}/{sample}_IBDQC"
        conda: "envs/plink.yaml"
        shell:
            '''
plink --keep-allele-order --bfile {params.indat_plink} --genome --min 0.05 \
  --out {params.out}
'''

rule relatedness_sample_fail:
    input:
        genome = rules.relatedness_QC.output.genome,
        geno_all = rules.king_all.output if config['king'] else "/dev/null",
        fam = sexcheck_in_plink_stem + ".fam"
    params:
        Family = FAMILY,
        king = config['king'],
        threshold = 0.1875,
        geno = rules.relatedness_QC.params.out if config['king'] else rules.relatedness_QC.output.genome
    output:
        out = "{dataout}/{sample}_exclude.relatedness",
        rdat = "{dataout}/{sample}_IBDQC.Rdata"
    conda: "envs/r.yaml"
    script: "scripts/relatedness_QC.R"

# ---- Exclude Samples with outlying heterozigosity ----
rule heterozygosity_QC:
    input: rules.sample_prune.output
    output: "{dataout}/{sample}_HetQC.het"
    params:
        indat_plink = rules.sample_prune.params.out,
        out = "{dataout}/{sample}_HetQC"
    conda: "envs/plink.yaml"
    shell: "plink --keep-allele-order --bfile {params.indat_plink} --het --out {params.out}"

rule heterozygosity_sample_fail:
    input: rules.heterozygosity_QC.output
    output: "{dataout}/{sample}_exclude.heterozigosity"
    conda: "envs/r.yaml"
    script: 'scripts/heterozygosity_QC.R'

# Run PCA to control for population stratification
if config['pcair']:
    assert config['king'], "You must use KING for relatedness if using PCAiR!"
    rule ancestryFilt:
        input:
            plink = expand("{{dataout}}/{{sample}}_pruned.{ext}",
                           ext=BPLINK, dataout = DATAOUT),
            exclude = "{dataout}/{sample}_exclude.pca"
        output:
            temp(expand("{{dataout}}/{{sample}}_filtered_PCApre.{ext}",
                 ext=BPLINK, dataout = DATAOUT)),
        params:
            indat = "{dataout}/{sample}_pruned",
            plinkout = "{dataout}/{sample}_filtered_PCApre"
        conda: "envs/plink.yaml"
        shell:
            r'''
plink --keep-allele-order --bfile {params.indat} \
  --remove {input.exclude} \
  --make-bed --out {params.plinkout}
'''

    rule filterKING:
        input:
            king = "{dataout}/{sample}_IBDQC.all.kingfiles",
            exclude = "{dataout}/{sample}_exclude.pca"
        output:
            "{dataout}/{sample}_IBDQC.all.popfilt.kingfiles"
        params:
            indat = "{dataout}/{sample}_IBDQC.all",
        conda: "envs/r.yaml"
        script: "scripts/filterKing.R"
#         shell:
#             r'''
# Rscript workflow/scripts/filterKing.R {params.indat} {input.exclude}
# if test -n "$(find {params.dataout} -name "{wildcards.sample}_IBDQC.all.popfilt.kin*")"; then
#   find {params.dataout} -name "{wildcards.sample}_IBDQC.all.popfilt.kin*" > {output}
# fi
# '''

    rule PCAPartitioning:
        input:
            plink = rules.ancestryFilt.output,
            king = rules.filterKING.output,
            iterative = rules.relatedness_sample_fail.output.out
        output:
            expand("{{dataout}}/{{sample}}_filtered_PCApre.{ext}",ext=['unrel', 'partition.log'], dataout = DATAOUT)
        params:
            stem = rules.ancestryFilt.params.plinkout,
            king = rules.filterKING.params.indat + ".popfilt"
        conda: "envs/r.yaml"
        script: "scripts/PartitionPCAiR.R"

    rule stratFrq:
        input:
            plink = rules.ancestryFilt.output,
            unrel = rules.PCAPartitioning.output[0],
        output: "{dataout}/{sample}_filtered_PCAfreq.frqx"
        params:
            indat = rules.ancestryFilt.params.plinkout,
            out = "{dataout}/{sample}_filtered_PCAfreq"
        conda: "envs/plink.yaml"
        shell:
            '''
plink --keep-allele-order --bfile {params.indat} --freqx \
  --within {input.unrel} --keep-cluster-names unrelated \
  --out {params.out}
'''

    rule PopulationStratification:
        input:
            plink = rules.ancestryFilt.output,
            unrel = rules.PCAPartitioning.output[0],
            frq = rules.stratFrq.output
        output:
            expand("{{dataout}}/{{sample}}_filtered_PCA.{ext}", ext=['eigenval', 'eigenvec'], dataout = DATAOUT)
        params:
            indat = rules.ancestryFilt.params.plinkout,
            out = "{dataout}/{sample}_filtered_PCA"
        conda: "envs/plink.yaml"
        shell:
            '''
plink --keep-allele-order --bfile {params.indat} --read-freq {input.frq} --pca 10 \
  --within {input.unrel} --pca-cluster-names unrelated \
  --out {params.out}
'''
else:
    rule PopulationStratification:
        input:
            plink = expand("{{dataout}}/{{sample}}_pruned.{ext}",
                           ext=BPLINK, dataout = DATAOUT),
            exclude = "{dataout}/{sample}_exclude.pca"
        output:
            expand("{{dataout}}/{{sample}}_filtered_PCA.{ext}", ext=['eigenval', 'eigenvec'], dataout = DATAOUT)
        params:
            indat = "{dataout}/{sample}_pruned",
            out = "{dataout}/{sample}_filtered_PCA"
        conda: "envs/plink.yaml"
        shell:
            '''
plink --keep-allele-order --bfile {params.indat} --remove {input.exclude}
  --pca 10 --out {params.out}
'''

rule SampleExclusion:
    input:
        SampCallRate = "{dataout}/{sample}_callRate.irem",
        het = "{dataout}/{sample}_exclude.heterozigosity" if 'heterozygosity' in do_qc else '/dev/null',
        sex = "{dataout}/{sample}_exclude.sexcheck" if 'sex' in do_qc else '/dev/null',
        pca = "{dataout}/{sample}_exclude.pca" if 'ancestry' in do_qc else '/dev/null',
        relat = "{dataout}/{sample}_exclude.relatedness" if 'relatedness' in do_qc else '/dev/null'
    output:
        out = "{dataout}/{sample}_exclude.samples",
        out_distinct = "{dataout}/{sample}_exclude.distinct_samples"
    conda: "envs/r.yaml"
    script: "scripts/sample_QC.R"

rule Exclude_failed:
    input:
        plink = sexcheck_in_plink,
        indat_exclude = rules.SampleExclusion.output.out_distinct
    output:
        temp(expand("{{dataout}}/{{sample}}_Excluded.{ext}", ext=BPLINK, dataout = DATAOUT)),
        excl = temp('{dataout}/{sample}_exclude.plink')
    params:
        indat_plink = sexcheck_in_plink_stem,
        out = "{dataout}/{sample}_Excluded"
    conda: "envs/plink.yaml"
    shell:
        '''
cat {input.indat_exclude} | sed '1d' | cut -d' ' -f1,2 > {output.excl}
plink --keep-allele-order --bfile {params.indat_plink} --remove {output.excl} \
--make-bed --out {params.out}
'''


rule GWAS_QC_Report:
    input:
        SexFile = "{dataout}/{sample}_SexQC.sexcheck" if 'sex' in do_qc else '/dev/null',
        hwe = "{dataout}/{sample}_SnpQc.hwe",
        frq = "{dataout}/{sample}_SnpQc.frq",
        frqx = "{dataout}/{sample}_SnpQc.frqx",
        imiss = "{dataout}/{sample}_callRate.imiss",
        HetFile = "{dataout}/{sample}_HetQC.het" if 'heterozygosity' in do_qc else '/dev/null',
        IBD_stats = "{dataout}/{sample}_IBDQC.Rdata" if 'relatedness' in do_qc else '/dev/null'
        PCA_rdat = "{dataout}/{sample}_pca.Rdata" if 'ancestry' in do_qc else '/dev/null'
        PopStrat_eigenval = "{dataout}/{sample}_filtered_PCA.eigenval",
        PopStrat_eigenvec = "{dataout}/{sample}_filtered_PCA.eigenvec",
        partmethod = rules.PCAPartitioning.output[1] if config["pcair"] else "/dev/null"
    output:
         "{dataout}/stats/{sample}_GWAS_QC.html"
    params:
        script = "GWAS_QC.Rmd",
        rwd = RWD,
        Family = FAMILY,
        pi_threshold = 0.1875,
        output_dir = "{dataout}/stats",
        idir = "{dataout}/stats/md/{sample}",
        geno_miss = config['QC']['GenoMiss'],
        samp_miss = config['QC']['SampMiss'],
        MAF = config['QC']['MAF'],
        HWE = config['QC']['HWE'],
        superpop = config['superpop'],
        partmethod = rules.PCAPartitioning.output[1] if config["pcair"] else "none"
    conda: "envs/r.yaml"
    script: "scripts/RenderMarkdown.R"
#     shell:
#         '''
# R -e 'nm <- sample(c("Shea J. Andrews", "Brian Fulton-Howard"), \
# replace=F); nm <- paste(nm[1], "and", nm[2]); \
# rmarkdown::render("{params.script}", output_dir = "{params.output_dir}", \
# output_file = "{output}", intermediates_dir = "{params.idir}", \
# params = list(rwd = "{params.rwd}", Sample = "{wildcards.sample}", \
# auth = nm, Path_SexFile = "{input.SexFile}", Path_hwe = "{input.hwe}", \
# Path_frq = "{input.frq}", Path_frqx = "{input.frqx}", \
# Path_imiss = "{input.imiss}", Path_HetFile = "{input.HetFile}", \
# pi_threshold = {params.pi_threshold}, Family = {params.Family}, \
# Path_IBD_stats = "{input.IBD_stats}", Path_PCA_rdat = "{input.PCA_rdat}", \
# Path_PopStrat_eigenval = "{input.PopStrat_eigenval}", \
# Path_PopStrat_eigenvec = "{input.PopStrat_eigenvec}", maf = {params.MAF}, \
# hwe = {params.HWE}, missing_geno = {params.geno_miss}, \
# partmethod = "{params.partmethod}", \
# missing_sample = {params.samp_miss}, superpop = "{params.superpop}"))' --slave
# '''
